// Code generated by yo. DO NOT EDIT.
// Package models contains the types.
package models

import (
	"context"
	"fmt"

	"cloud.google.com/go/spanner"
	"google.golang.org/grpc/codes"
)

// SchemaMigration represents a row from 'SchemaMigrations'.
type SchemaMigration struct {
	Version int64 `spanner:"Version" json:"Version"` // Version
	Dirty   bool  `spanner:"Dirty" json:"Dirty"`     // Dirty
}

func SchemaMigrationPrimaryKeys() []string {
	return []string{
		"Version",
	}
}

func SchemaMigrationColumns() []string {
	return []string{
		"Version",
		"Dirty",
	}
}

func (sm *SchemaMigration) columnsToPtrs(cols []string, customPtrs map[string]interface{}) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		if val, ok := customPtrs[col]; ok {
			ret = append(ret, val)
			continue
		}

		switch col {
		case "Version":
			ret = append(ret, &sm.Version)
		case "Dirty":
			ret = append(ret, &sm.Dirty)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}
	return ret, nil
}

func (sm *SchemaMigration) columnsToValues(cols []string) ([]interface{}, error) {
	ret := make([]interface{}, 0, len(cols))
	for _, col := range cols {
		switch col {
		case "Version":
			ret = append(ret, sm.Version)
		case "Dirty":
			ret = append(ret, sm.Dirty)
		default:
			return nil, fmt.Errorf("unknown column: %s", col)
		}
	}

	return ret, nil
}

// newSchemaMigration_Decoder returns a decoder which reads a row from *spanner.Row
// into SchemaMigration. The decoder is not goroutine-safe. Don't use it concurrently.
func newSchemaMigration_Decoder(cols []string) func(*spanner.Row) (*SchemaMigration, error) {
	customPtrs := map[string]interface{}{}

	return func(row *spanner.Row) (*SchemaMigration, error) {
		var sm SchemaMigration
		ptrs, err := sm.columnsToPtrs(cols, customPtrs)
		if err != nil {
			return nil, err
		}

		if err := row.Columns(ptrs...); err != nil {
			return nil, err
		}

		return &sm, nil
	}
}

// Insert returns a Mutation to insert a row into a table. If the row already
// exists, the write or transaction fails.
func (sm *SchemaMigration) Insert(ctx context.Context) *spanner.Mutation {
	return spanner.Insert("SchemaMigrations", SchemaMigrationColumns(), []interface{}{
		sm.Version, sm.Dirty,
	})
}

// Update returns a Mutation to update a row in a table. If the row does not
// already exist, the write or transaction fails.
func (sm *SchemaMigration) Update(ctx context.Context) *spanner.Mutation {
	return spanner.Update("SchemaMigrations", SchemaMigrationColumns(), []interface{}{
		sm.Version, sm.Dirty,
	})
}

// InsertOrUpdate returns a Mutation to insert a row into a table. If the row
// already exists, it updates it instead. Any column values not explicitly
// written are preserved.
func (sm *SchemaMigration) InsertOrUpdate(ctx context.Context) *spanner.Mutation {
	return spanner.InsertOrUpdate("SchemaMigrations", SchemaMigrationColumns(), []interface{}{
		sm.Version, sm.Dirty,
	})
}

// UpdateColumns returns a Mutation to update specified columns of a row in a table.
func (sm *SchemaMigration) UpdateColumns(ctx context.Context, cols ...string) (*spanner.Mutation, error) {
	// add primary keys to columns to update by primary keys
	colsWithPKeys := append(cols, SchemaMigrationPrimaryKeys()...)

	values, err := sm.columnsToValues(colsWithPKeys)
	if err != nil {
		return nil, newErrorWithCode(codes.InvalidArgument, "SchemaMigration.UpdateColumns", "SchemaMigrations", err)
	}

	return spanner.Update("SchemaMigrations", colsWithPKeys, values), nil
}

// FindSchemaMigration gets a SchemaMigration by primary key
func FindSchemaMigration(ctx context.Context, db YORODB, version int64) (*SchemaMigration, error) {
	key := spanner.Key{version}
	row, err := db.ReadRow(ctx, "SchemaMigrations", key, SchemaMigrationColumns())
	if err != nil {
		return nil, newError("FindSchemaMigration", "SchemaMigrations", err)
	}

	decoder := newSchemaMigration_Decoder(SchemaMigrationColumns())
	sm, err := decoder(row)
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "FindSchemaMigration", "SchemaMigrations", err)
	}

	return sm, nil
}

// ReadSchemaMigration retrieves multiples rows from SchemaMigration by KeySet as a slice.
func ReadSchemaMigration(ctx context.Context, db YORODB, keys spanner.KeySet) ([]*SchemaMigration, error) {
	var res []*SchemaMigration

	decoder := newSchemaMigration_Decoder(SchemaMigrationColumns())

	rows := db.Read(ctx, "SchemaMigrations", keys, SchemaMigrationColumns())
	err := rows.Do(func(row *spanner.Row) error {
		sm, err := decoder(row)
		if err != nil {
			return err
		}
		res = append(res, sm)

		return nil
	})
	if err != nil {
		return nil, newErrorWithCode(codes.Internal, "ReadSchemaMigration", "SchemaMigrations", err)
	}

	return res, nil
}

// Delete deletes the SchemaMigration from the database.
func (sm *SchemaMigration) Delete(ctx context.Context) *spanner.Mutation {
	values, _ := sm.columnsToValues(SchemaMigrationPrimaryKeys())
	return spanner.Delete("SchemaMigrations", spanner.Key(values))
}
